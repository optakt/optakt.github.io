{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction TODO: Explain the purpose of this site and its documentation. TODO: Automatically generate table of contents here if MkDocs theme doesn't already come with one.","title":"Introduction"},{"location":"#introduction","text":"TODO: Explain the purpose of this site and its documentation. TODO: Automatically generate table of contents here if MkDocs theme doesn't already come with one.","title":"Introduction"},{"location":"design/","text":"Design Principles TODO: Explain why those design principles are important to us and why we value engineers who care about designing software in well-thought-out ways. SOLID TODO: Link to https://dave.cheney.net/2016/08/20/solid-go-design TODO: When we have a blog post on the subject, link it here. Clean Code TODO: Link to https://dave.cheney.net/2019/07/09/clear-is-better-than-clever","title":"Design Principles"},{"location":"design/#design-principles","text":"TODO: Explain why those design principles are important to us and why we value engineers who care about designing software in well-thought-out ways.","title":"Design Principles"},{"location":"design/#solid","text":"TODO: Link to https://dave.cheney.net/2016/08/20/solid-go-design TODO: When we have a blog post on the subject, link it here.","title":"SOLID"},{"location":"design/#clean-code","text":"TODO: Link to https://dave.cheney.net/2019/07/09/clear-is-better-than-clever","title":"Clean Code"},{"location":"process/","text":"Team Process TODO: Explain why we prefer to keep minimal processes. Meetings TODO: Explain 10am meeting. TODO: Explain backlog refinement. Communication TODO: Explain GH Issues/PR communication. TODO: Explain Slack communication. TODO: Explain that any technical idea/proposal should result in an issue.","title":"Team Process"},{"location":"process/#team-process","text":"TODO: Explain why we prefer to keep minimal processes.","title":"Team Process"},{"location":"process/#meetings","text":"TODO: Explain 10am meeting. TODO: Explain backlog refinement.","title":"Meetings"},{"location":"process/#communication","text":"TODO: Explain GH Issues/PR communication. TODO: Explain Slack communication. TODO: Explain that any technical idea/proposal should result in an issue.","title":"Communication"},{"location":"projects/","text":"Projects Organization TODO: Explain what is the minimal documentation required for any Optakt project. TODO: Explain what how we handle CI and releases with GitHub Actions. Git Workflow TODO: Explain how we work with branches and why. Mention feature branches for big features. TODO: Explain that each PR has to be related to one issue. TODO: Explain PR requirements (labels, squash merges only, CI should pass, one approval at least, etc.) TODO: Explain that a PR should be blocked by a reviewer only if the reviewer does not want something in the PR to get merged as is. Feedback can be given without blocking the PR. TODO: Explain that any TODO in the code has to be related to one issue (which can be an external one). TODO: Explain that any FIXME in the code must be fixed before the PR that adds it can be merged. TODO: Explain that any generated code has to be generated using a go generate target and not a Makefile or equivalent. TODO: Explain releases and changelog generation. Documentation TODO: Link to internal project documentation for each project.","title":"Projects"},{"location":"projects/#projects","text":"","title":"Projects"},{"location":"projects/#organization","text":"TODO: Explain what is the minimal documentation required for any Optakt project. TODO: Explain what how we handle CI and releases with GitHub Actions.","title":"Organization"},{"location":"projects/#git-workflow","text":"TODO: Explain how we work with branches and why. Mention feature branches for big features. TODO: Explain that each PR has to be related to one issue. TODO: Explain PR requirements (labels, squash merges only, CI should pass, one approval at least, etc.) TODO: Explain that a PR should be blocked by a reviewer only if the reviewer does not want something in the PR to get merged as is. Feedback can be given without blocking the PR. TODO: Explain that any TODO in the code has to be related to one issue (which can be an external one). TODO: Explain that any FIXME in the code must be fixed before the PR that adds it can be merged. TODO: Explain that any generated code has to be generated using a go generate target and not a Makefile or equivalent. TODO: Explain releases and changelog generation.","title":"Git Workflow"},{"location":"projects/#documentation","text":"TODO: Link to internal project documentation for each project.","title":"Documentation"},{"location":"testing/","text":"Testing Guide TODO: Explain why it is essential to have proper testing in our projects and for PRs to maintain tests up-to-date. Unit Tests TODO: Introduce the subject with the example of how we made the Flow DPS mapper testable. TODO: Explain internal/external unit tests. TODO: Explain manual mocks. TODO: Explain pseudorandom generic values. TODO: Explain test parallelization. TODO: Explain how awesome the native testing package is. TODO: Explain subtest and structure of nested tests. TODO: Explain when to use subtests vs when to use table-driven tests. Integration Tests TODO: Explain build tag usage to prevent integration tests from being run at all times. TODO: Explain how we write integration tests. Benchmarks & Examples TODO: Explain how projects/packages that are meant to be used as libraries should ideally provide benchmarks and examples on top of proper documentation.","title":"Testing Guide"},{"location":"testing/#testing-guide","text":"TODO: Explain why it is essential to have proper testing in our projects and for PRs to maintain tests up-to-date.","title":"Testing Guide"},{"location":"testing/#unit-tests","text":"TODO: Introduce the subject with the example of how we made the Flow DPS mapper testable. TODO: Explain internal/external unit tests. TODO: Explain manual mocks. TODO: Explain pseudorandom generic values. TODO: Explain test parallelization. TODO: Explain how awesome the native testing package is. TODO: Explain subtest and structure of nested tests. TODO: Explain when to use subtests vs when to use table-driven tests.","title":"Unit Tests"},{"location":"testing/#integration-tests","text":"TODO: Explain build tag usage to prevent integration tests from being run at all times. TODO: Explain how we write integration tests.","title":"Integration Tests"},{"location":"testing/#benchmarks-examples","text":"TODO: Explain how projects/packages that are meant to be used as libraries should ideally provide benchmarks and examples on top of proper documentation.","title":"Benchmarks &amp; Examples"},{"location":"style/go/","text":"Go Code Style Guidelines TODO: Write a minimal amount of code style guidelines we adhere to that we already discussed with the team. Iterate on this document later to add new rules as we go.","title":"Go"},{"location":"style/go/#go-code-style-guidelines","text":"TODO: Write a minimal amount of code style guidelines we adhere to that we already discussed with the team. Iterate on this document later to add new rules as we go.","title":"Go Code Style Guidelines"},{"location":"style/markdown/","text":"Markdown Style Guidelines TODO: Write a documentation style guide to ensure consistent documentation.","title":"Markdown"},{"location":"style/markdown/#markdown-style-guidelines","text":"TODO: Write a documentation style guide to ensure consistent documentation.","title":"Markdown Style Guidelines"}]}